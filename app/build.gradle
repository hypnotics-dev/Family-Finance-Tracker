/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.10.2/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {


    testImplementation libs.junit.jupiter
    implementation libs.guava

    testImplementation(platform("org.junit:junit-bom:5.11.3"))
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine'

    implementation 'org.xerial:sqlite-jdbc:3.46.1.3'

    implementation group: 'org.apache.poi', name: 'poi', version: '3.9'
    implementation group: 'org.apache.poi', name: 'poi-ooxml', version: '5.3.0'

}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'team05.gui.App'
}

javafx {
    version='21.0.1'
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.graphics' ]
}

test {
    // fast tests done in areas with high churn
    useJUnitPlatform {
        includeTags 'fast' // Only runs tests with the @Tags("fast") decorator
        excludeTags 'now', 'merge'
    }
    testLogging {
        events "passed", "failed", "skipped"
        showStandardStreams = true
    }
}
task testAll (type: Test) {
    group = "Verification"
    description = "Run all tests no matter what tag"
    useJUnitPlatform()
    testLogging {
        events "passed", "failed", "skipped"
        showStandardStreams = true
    }
}
task testMerge(type: Test) {
    group = "Verification"
    description = "Run all tests tagged 'merge'"
    useJUnitPlatform {
         includeTags 'fast', 'merge' 
         excludeTags 'now'
    }
    testLogging {
        events "passed", "failed", "skipped"
        showStandardStreams = true
    }
}

task testNow(type: Test){
    group = "Verification"
    description = "Run all tests tagged 'now'"
    useJUnitPlatform {
        includeTags 'now' // Include tests tagged with "now"
        excludeTags 'fast', 'merge'
    }
    testLogging {
        events "passed", "failed", "skipped"
        showStandardStreams = true
    }
}

tasks.testAll {
    testClassesDirs = testing.suites.test.sources.output.classesDirs
    classpath = testing.suites.test.sources.runtimeClasspath
}
tasks.testMerge {
    testClassesDirs = testing.suites.test.sources.output.classesDirs
    classpath = testing.suites.test.sources.runtimeClasspath
}
tasks.testNow {
    testClassesDirs = testing.suites.test.sources.output.classesDirs
    classpath = testing.suites.test.sources.runtimeClasspath
}
tasks.test {
    testClassesDirs = testing.suites.test.sources.output.classesDirs
    classpath = testing.suites.test.sources.runtimeClasspath
}
